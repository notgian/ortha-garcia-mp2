inputPassenger(int priority, String20 firstName, String20 lastName, int id, int dropOffPoint, int seatNumber, struct Bus *bus, int nReserve)
{
	int lowestPriorityIndex, referencePriority;
	struct Passenger lowestPriorityPassenger = createEmptyPassenger();
	struct Passenger displacedPassenger = createEmptyPassenger();
	struct Passenger tempPassenger = createEmptyPassenger();

    if (bus->tripNumber == -1)
    {
        printf("There are no more remaining bus trips!\n");
    }

    // Check if the drop-off point is valid
    if !validDropOff:
        Revert drop off point to default
        
    if Full and !nReserve:
        find lowest priority passenger
        if no lowest priority passenger:   
            if bus->next exists:
                board current passenger to next bus
            else:
                passenger cannot be ejected
        else (if lowerPriority passenger is found):
            swap lowerPriorityPassenger and currentPassenger
            move lowerPriority passenger to next trip

    else: // If not full
        if (seatNumber == -1 and nReserve != 1): // Automatic seat assignment, no reservation
        else if (seatNumber == -1 and nReserve == 1 && bus->reserveCount  <5) // For when a reserved passenger is displaced and must select a seat      
        else: // seat number is specified...

    
    // New algorithim       
    init Passenger *displacedPassenger = NULL;
    init Passenger *tempPassenger = NULL;


    attempt to board passenger in this manner:

    if bus == NULL:
        display that there are no trips remaining

    if bus is full:
        if not currentPassenger reserving and not seat assignment automatic:
            loop backwards to find lowest priority passenger
            set to *tempPassenger

        if seat is specified and current passenger is reserving
            check if passenger on seat is lower priority:
            set to *tempPassenger
        
        if *tempPassenger != NULL: // A passenger can be displaced
            *displacedPassenger = *tempPassenger
            *tempPassenger = currentPassenger

        if (*displacedPassenger == NULL) // 
            if current passenger is reserved: // Happens if the seat chosen is already occupied by a reserved passenger with a higher priority
                attempt to board onto the same bus, ask for user input
            if current passenger is not reserved
                attempt to board onto the next bus

        else if *displacedPassenger is reserved: // Happens if a higher priority passenger reserves the seat of an already reserved passenger
            attempt to board onto the same bus
        else (if displacedPassenger is not reserved): // Passenger is displaced by priority 
            attempt to board onto the next bus
        
    else if bus is not full:
        if automaticSeatAssignment: // Resolves seat assignment == -1
            assign seat automatically
    
        else if seat is empty: // Seat is specified, but it's empty anw
            board the passenger        
        else if current passenger is reserving: // Seat is occupied and Passenger is reserving
            if *(passengerOnSeatSpecified) is not reserved || *(passengerOnSeatSpecified) is lowerPriority
                *displacedPassenger = *(passengerOnSeatSpecified)
                *(passengerOnSeatSpecified) = currentPassenger

            board *displacedPassenger onto same bus



        
    
    

        

    
    else
    {
        if (seatNumber == -1 && nReserve != 1) // Automatic seat assignment
        {
            for (i = 0; i < MAX_PASSENGERS; i++)
            {
                if (bus->passengers[i].onboard == 0)
                {
                    setPassenger(&(bus->passengers[i]),
                                 priority,
                                 firstName,
                                 lastName,
                                 id,
                                 dropOffPoint,
                                 nReserve);

                    printf("\nPassenger Input Successfully!\n");
                    printf("   Name        : %s, %s\n", lastName, firstName);
                    printf("   ID Number   : %d\n", id);
                    printf("   Priority    : %d\n", priority);
                    printf("   Seat Number : %d\n", i + 1);
                    printf("   Trip Number : AE-%d\n", bus->tripNumber);
                    i = MAX_PASSENGERS;
                }
            }
        }
        else if (seatNumber == -1 && nReserve == 1 && bus->nReserveCount < 5) // Reserved passenger selects a seat
        {
        	while(seatNumber > 16 || seatNumber <= 0)
        	{
            printf("What seat do you want to occupy?\n");
            scanf(" %d", &seatNumber);
            }
            
            if (bus->passengers[seatNumber - 1].onboard)
            {
                if (bus->passengers[seatNumber - 1].reserved == 1)
                {
                	if(bus->passengers[seatNumber - 1].priority > priority)
					{
						displacedPassenger = bus->passengers[seatNumber - 1];	
						setPassenger(&(bus->passengers[seatNumber - 1]),
                                 priority,
                                 firstName,
                                 lastName,
                                 id,
                                 dropOffPoint,
                                 nReserve);
                                
	                    printf("\nPassenger Input Successfully!\n");
	                    printf("   Name        : %s, %s\n", lastName, firstName);
	                    printf("   ID Number   : %d\n", id);
	                    printf("   Priority    : %d\n", priority);
	                    printf("   Seat Number : %d\n", seatNumber);
	                    printf("   Trip Number : AE-%d\n", bus->tripNumber);
	                    
	                    // Find the lowest priority passenger to displace
	                    lowestPriorityIndex = -1;
	                    referencePriority = 0; // Priority ranges from 1 to 6
	                    for (i = MAX_PASSENGERS - 1; i >= 0; i--) 
	                    {
	                        if (bus->passengers[i].priority > referencePriority && bus->passengers[i].reserved != 1)
	                        {
	                            referencePriority = bus->passengers[i].priority;
	                            lowestPriorityIndex = i;
	                        }
	                    }
	                    if (bus->passengers[lowestPriorityIndex].priority > displacedPassenger.priority || displacedPassenger.reserved == 1)
	                    	{
		                        lowestPriorityPassenger = bus->passengers[lowestPriorityIndex];
		                        bus->passengers[lowestPriorityIndex].onboard = 0; // Remove the lowest priority passenger
		                        bus->passengers[lowestPriorityIndex] = displacedPassenger;
								printf("Passenger %s %s has been relocated to seat %d.\n", displacedPassenger.firstName,displacedPassenger.lastName, lowestPriorityIndex + 1);
								if(strlen(lowestPriorityPassenger.firstName) != 0)
								{
			                        printf("\nPassenger %s %s has been displaced and will be moved to the next trip.\n",
			                               lowestPriorityPassenger.firstName, lowestPriorityPassenger.lastName);
			
			                        inputPassenger(
			                            lowestPriorityPassenger.priority,
			                            lowestPriorityPassenger.firstName,
			                            lowestPriorityPassenger.lastName,
			                            lowestPriorityPassenger.id,
			                            lowestPriorityPassenger.dropOff,
			                            -1,
			                            bus->next,
			                            lowestPriorityPassenger.reserved);
		                        }
	                    	}	
					}
					else
					{
						printf("Sorry, the seat is already occupied by a passenger with higher or equal priority.\n");
                    	bus->nReserveCount--;	
					}
                }
                else if (priority < bus->passengers[seatNumber - 1].priority)
                {
                    displacedPassenger = bus->passengers[seatNumber - 1];
                    setPassenger(&(bus->passengers[seatNumber - 1]),
                                 priority,
                                 firstName,
                                 lastName,
                                 id,
                                 dropOffPoint,
                                 nReserve);

                    printf("\nPassenger Input Successfully!\n");
                    printf("   Name        : %s, %s\n", lastName, firstName);
                    printf("   ID Number   : %d\n", id);
                    printf("   Priority    : %d\n", priority);
                    printf("   Seat Number : %d\n", seatNumber);
                    printf("   Trip Number : AE-%d\n", bus->tripNumber);

                    // Find the lowest priority passenger to displace
                    lowestPriorityIndex = -1;
                    referencePriority = 0; // Priority ranges from 1 to 6
                    for (i = MAX_PASSENGERS - 1; i >= 0; i--) 
                    {
                        if (bus->passengers[i].priority > referencePriority && bus->passengers[i].reserved != 1)
                        {
                            referencePriority = bus->passengers[i].priority;
                            lowestPriorityIndex = i;
                        }
                    }

                    if (bus->passengers[lowestPriorityIndex].priority > displacedPassenger.priority)
                    {
                        lowestPriorityPassenger = bus->passengers[lowestPriorityIndex];
                        bus->passengers[lowestPriorityIndex].onboard = 0; // Remove the lowest priority passenger
                        bus->passengers[lowestPriorityIndex] = displacedPassenger;
						printf("Passenger %s %s has been relocated to seat %d.\n", displacedPassenger.firstName,displacedPassenger.lastName, lowestPriorityIndex + 1);
						
						if(strlen(lowestPriorityPassenger.firstName) != 0)
						{
							printf("\nPassenger %s %s has been displaced and will be moved to the next trip.\n",
                               lowestPriorityPassenger.firstName, lowestPriorityPassenger.lastName);

	                        inputPassenger(
	                            lowestPriorityPassenger.priority,
	                            lowestPriorityPassenger.firstName,
	                            lowestPriorityPassenger.lastName,
	                            lowestPriorityPassenger.id,
	                            lowestPriorityPassenger.dropOff,
	                            -1,
	                            bus->next,
	                            lowestPriorityPassenger.reserved);
						}
                    }
                    else
                    {
                    	lowestPriorityPassenger = displacedPassenger;
                    	printf("\nPassenger %s %s has been displaced and will be moved to the next trip.\n",
                               lowestPriorityPassenger.firstName, lowestPriorityPassenger.lastName);
                               
                    	inputPassenger(
                            lowestPriorityPassenger.priority,
                            lowestPriorityPassenger.firstName,
                            lowestPriorityPassenger.lastName,
                            lowestPriorityPassenger.id,
                            lowestPriorityPassenger.dropOff,
                            -1,
                            bus->next,
                            lowestPriorityPassenger.reserved);
					}
                }
                else
                {
                    printf("Sorry, the seat is already occupied by a passenger with higher or equal priority.\n");
                    bus->nReserveCount--;
                }
            }
            else
            {
                setPassenger(&(bus->passengers[seatNumber - 1]),
                             priority,
                             firstName,
                             lastName,
                             id,
                             dropOffPoint,
                             nReserve);

                printf("\nPassenger Input Successfully!\n");
                printf("   Name        : %s, %s\n", lastName, firstName);
                printf("   ID Number   : %d\n", id);
                printf("   Priority    : %d\n", priority);
                printf("   Seat Number : %d\n", seatNumber);
                printf("   Trip Number : AE-%d\n", bus->tripNumber);
            }
        }
        else
        {
            setPassenger(&(bus->passengers[seatNumber - 1]),
                         priority,
                         firstName,
                         lastName,
                         id,
                         dropOffPoint,
                         nReserve);

            printf("\nPassenger Input Successfully!\n");
            printf("   Name        : %s, %s\n", lastName, firstName);
            printf("   ID Number   : %d\n", id);
            printf("   Priority    : %d\n", priority);
            printf("   Seat Number : %d\n", seatNumber);
            printf("   Trip Number : AE-%d\n", bus->tripNumber);
        }
    }
}